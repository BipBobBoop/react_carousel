{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","frameSize","updateFrameSize","step","updateStep","itemWidth","updateItemWidth","animationDuration","updateAnimationDuration","currentIndex","setCurrentIndex","updateCurrentIndex","infinite","updateInfinite","transformValue","className","type","onClick","newIndex","length","style","width","transform","transition","map","image","index","src","alt","min","max","value","onChange","event","target","App","useState","setFrameSize","setStep","setItemWidth","setAnimationDuration","setInfinite","size","steps","duration","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc0910e1.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  frameSize: number;\n  updateFrameSize: (newFrameSize: number) => void;\n  step: number;\n  updateStep: (newStep: number) => void;\n  itemWidth: number;\n  updateItemWidth: (newItemWidth: number) => void;\n  animationDuration: number;\n  updateAnimationDuration: (newAnimationDuration: number) => void;\n  currentIndex: number;\n  updateCurrentIndex: (index: number) => void;\n  infinite: boolean;\n  updateInfinite: (state: boolean) => void;\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  frameSize,\n  updateFrameSize,\n  step,\n  updateStep,\n  itemWidth,\n  updateItemWidth,\n  animationDuration,\n  updateAnimationDuration,\n  currentIndex,\n  updateCurrentIndex: setCurrentIndex,\n  infinite,\n  updateInfinite,\n}) => {\n  const handleNext = () => {\n    let newIndex = currentIndex + step;\n\n    if (newIndex >= images.length - frameSize) {\n      if (infinite) {\n        newIndex = newIndex + frameSize - images.length;\n      } else {\n        newIndex = images.length - frameSize;\n      }\n    }\n\n    setCurrentIndex(newIndex);\n  };\n\n  const handlePrev = () => {\n    let newIndex = currentIndex - step;\n\n    if (newIndex < 0) {\n      if (infinite) {\n        newIndex = images.length - step;\n      } else {\n        newIndex = 0;\n      }\n    }\n\n    setCurrentIndex(newIndex);\n  };\n\n  const transformValue = -currentIndex * itemWidth;\n\n  return (\n    <div className=\"carousel\">\n      <div className=\"carousel__wrapper\">\n        <button\n          className=\"carousel__button\"\n          type=\"button\"\n          onClick={handlePrev}\n        >\n          Prev\n        </button>\n        <div\n          className=\"carousel__list__wrapper\"\n          style={{ width: `${itemWidth * frameSize}px` }}\n        >\n          <ul\n            className=\"carousel__list\"\n            style={{\n              transform: `translateX(${transformValue}px)`,\n              transition: `transform ${animationDuration}s ease`,\n            }}\n          >\n            {images.map((image: string, index: number) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  alt={`${index}`}\n                  className=\"carousel__img\"\n                  style={{ width: `${itemWidth}px` }}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <button\n          className=\"carousel__button\"\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={handleNext}\n        >\n          Next\n        </button>\n      </div>\n      <label>\n        {`Frame size is ${frameSize} `}\n        <input\n          type=\"range\"\n          min=\"2\"\n          max=\"5\"\n          value={frameSize}\n          onChange={(event) => updateFrameSize(+event.target.value)}\n        />\n      </label>\n      <label>\n        {`Step number is ${step} `}\n        <input\n          type=\"range\"\n          min=\"2\"\n          max=\"5\"\n          value={step}\n          onChange={(event) => updateStep(+event.target.value)}\n        />\n      </label>\n      <label>\n        {`Itemwidth is ${itemWidth} `}\n        <input\n          type=\"range\"\n          min=\"130\"\n          max=\"200\"\n          value={itemWidth}\n          onChange={(event) => updateItemWidth(+event.target.value)}\n        />\n      </label>\n      <label>\n        {`Animation duration ${animationDuration}s `}\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"3\"\n          value={animationDuration}\n          onChange={(event) => updateAnimationDuration(+event.target.value)}\n        />\n      </label>\n      <label>\n        {'Infinite loop '}\n        <input type=\"checkbox\" onChange={() => updateInfinite(!infinite)} />\n      </label>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\nexport const App: React.FC = () => {\n  const [images] = useState([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1);\n  const [infinite, setInfinite] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\" data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n\n      <Carousel\n        images={images}\n        frameSize={frameSize}\n        updateFrameSize={(size) => setFrameSize(size)}\n        step={step}\n        updateStep={(steps) => setStep(steps)}\n        itemWidth={itemWidth}\n        updateItemWidth={(width) => setItemWidth(width)}\n        animationDuration={animationDuration}\n        updateAnimationDuration={(duration) => setAnimationDuration(duration)}\n        currentIndex={currentIndex}\n        updateCurrentIndex={(index) => setCurrentIndex(index)}\n        infinite={infinite}\n        updateInfinite={(state) => setInfinite(state)}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}